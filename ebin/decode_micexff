#!/usr/bin/env escript

-export([main/1]).

decode(<<_Num:32/unsigned-little-integer, Rest/binary>>, Context) ->
   case erlang_fast:decode(Rest, Context) of
      {Msg, _, _} ->
         io:format("~p~n", [Msg]);
      Msg ->
         io:format("ERROR: ~p, Bin = ~p ~n", [Msg, Rest]),
         exit(failed)
   end.

loop(Context, Socket) ->
   receive
      {udp, _Socket, _SrcAddr, _Port, BinData} ->
         decode(BinData, Context),
         loop(Context, Socket)
   end.

main([Template, MulticastGroup, Port, UseId]) ->
   F = fun([], _) -> ok;
          (Err, Val) -> io:format("~p: ~p~n", [Err, Val]) end,
   case list_to_atom(UseId) of
      yes ->
         Options = [use_id];
      no ->
         Options = [];
      _ ->
         Options = [],
         exit(wrong_argument)
   end,
   Context = erlang_fast:create_context({file, Template}, Options, F),
   {ok, File} = file:open("context", [write]),
   {ok, IpAddress} = inet:parse_address(MulticastGroup),
   {ok, Socket} = gen_udp:open(erlang:list_to_integer(Port),
      [
         inet,
         binary,
         {active, true},
         {reuseaddr, true},
         {add_membership, {IpAddress, {0,0,0,0}}}
      ]),
   Pid = spawn(fun() -> loop(Context, Socket) end),
   ok = gen_udp:controlling_process(Socket, Pid),
   receive
      _Msg ->
         exit(ok)
   end;

main(_) ->
  io:format("Usage: decode_micexff <template> <multicast_group> <port> <use_id>~n"),
  io:format("   template        - path to FAST xml template file.~n"),
  io:format("   multicast_group -  multicast group to join.~n"),
  io:format("   port            -  multicast port.~n"),
  io:format("   use_id          -  (yes|no) use field id instead of field name in decoded output.~n").
